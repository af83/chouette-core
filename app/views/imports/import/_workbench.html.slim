.row
  .col-lg-6.col-md-6.col-sm-12.col-xs-12
    - metadata = { t('.data_recovery') => '-', t('.filename') => @import.try(:file_identifier)}
    - metadata = metadata.update({t('.status') => import_status(@import.status, verbose: true) })
    = definition_list t('metadatas'), metadata

.col-lg-12
  .error_messages
    = render 'shared/iev_interfaces/messages', messages: @import.messages

ruby:
 controls = []
 controls << TableBuilderHelper::Column.new(
   name: t('.stif_control'),
   attribute: Proc.new { |n| import_status(n.workbench_import_check_set&.status, verbose: true, default_status: :pending) },
   sortable: false,
   link_to: lambda do |item|
     item.workbench_import_check_set.present? && [@import.workbench, item.workbench_import_check_set]
   end
 ) if @workbench.import_compliance_control_set.present?
 controls += @workbench.workgroup.import_compliance_control_sets.each_with_index.map do |cs, i|
   TableBuilderHelper::Column.new(
     name: t('.organisation_control'),
     attribute: Proc.new { |n| import_status(n.workgroup_import_check_set(i)&.status, verbose: true, default_status: :pending) },
     sortable: false,
     link_to: lambda do |item|
       item.workgroup_import_check_set(i).present? && [@import.workbench, item.workgroup_import_check_set(i)]
    end
    )
  end

- if @import.resources.any?
  .col-lg-12
    = table_builder_2 @import.resources,
      [ \
        TableBuilderHelper::Column.new( \
          name: t('.referential_name'), \
          attribute: 'name', \
          sortable: false, \
          link_to: lambda do |item| \
            referential_path(item.referential) if item.referential.present? \
          end \
        ), \
        TableBuilderHelper::Column.new( \
          key: :status, \
          attribute: Proc.new { |n| import_status(n.status, verbose: true, default_status: :pending) }, \
          sortable: false, \
          link_to: lambda do |item| \
            item.netex_import.present? ? [@import.workbench, item.netex_import] : [@import.workbench, @import, item] \
          end \
        ), *controls \
      ],
      cls: 'table',
      overhead: [ \
        {}, \
        {}, \
        controls.present? ? { \
          title: I18n.t('imports.show.summary').html_safe, \
          width: controls.size, \
          cls: 'overheaded-default colspan="2"' \
        } : nil \
      ].compact
